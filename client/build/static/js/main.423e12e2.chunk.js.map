{"version":3,"sources":["Axios.tsx","Form.tsx","Field.tsx","ContactUs.tsx","core/IconLibrary.tsx","Navbar.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultPosts","num","Axios","useState","posts","setPosts","React","refresh","setRefresh","className","onClick","axios","method","url","params","email","threshold","then","response","console","log","push","id","data","catch","error","map","post","FormContext","createContext","undefined","required","values","fieldName","isEmail","search","isNumber","isNaN","Form","props","setValues","setState","state","setResponse","handleSubmit","e","a","preventDefault","validateForm","submitForm","submitSuccess","validate","newError","fields","validation","errors","rules","forEach","rule","args","length","haveError","Object","keys","key","this","haveErrors","JSON","stringify","context","Provider","value","onSubmit","noValidate","render","type","disabled","role","Component","Field","label","editor","options","getError","getEditorStyle","borderColor","Consumer","htmlFor","toLowerCase","onChange","currentTarget","onBlur","style","name","option","color","fontSize","defaultProps","ContactUsForm","action","fontawesome","add","faBitcoin","fontAwesomeLib","bitcoinIconDefinition","findIconDefinition","prefix","iconName","BitcoinNavbar","Navbar","bg","expand","variant","Brand","href","icon","size","Toggle","aria-controls","Collapse","Nav","Link","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.423e12e2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nexport interface IPost {\n  id: number;\n  data: string;\n}\n\nexport const defaultPosts: IPost[] = [];\nvar num = 0;\n\n\nexport const Axios: React.FC = () => {\n  const [posts, setPosts]: [IPost[], (posts: IPost[]) => void] = useState(\n    defaultPosts\n  );\n\n  const [refresh, setRefresh]: [\n    boolean,\n    (refresh: boolean) => void\n  ] = React.useState<boolean>(false);\n\n  const callAPIClick = () => {\n    setRefresh(false);\n    axios({\n      method: 'get',\n      url: `https://ln7kvmlhug.execute-api.us-east-1.amazonaws.com/prod/${num}`,\n      params: {\n        email: \"kaizen@gmail.com\",\n        threshold: 40000\n      }\n    })\n    .then((response) => {\n      console.log(response);\n      defaultPosts.push({id: num++, data: response.data});\n      setPosts(defaultPosts);\n      setRefresh(true);\n    })\n    .catch((error) => {\n      console.log(error);\n    })\n  };\n\n  return (\n    <div className=\"App\">\n      {<button onClick={callAPIClick}>Run</button>}\n      <ul className=\"posts\">\n        {refresh && posts.map((post) => (\n          <li key={post.id}>\n            <p>{post.data}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\n","import React from 'react';\nimport axios from 'axios';\nimport { IFieldProps } from \"./Field\";\n\nexport interface IFields {\n    [key: string]: IFieldProps;\n}\n\ninterface IFormProps {\n    /* The http path that the form will be posted to */\n    action: string;\n\n    /* The props for all the fields on the form */\n    fields: IFields;\n\n    /* A prop which allows content to be injected */\n    render: () => React.ReactNode;\n}\n  \nexport interface IValues {\n    /* Key value pairs for all the field values with key being the field name */\n    [key: string]: any;\n}\n  \nexport interface IErrors {\n    /* The validation error messages for each field (key is the field name */\n    [key: string]: string;\n}\n\nexport interface IResponse {\n    /* The data of the response*/\n    [key: string]: string;\n}\n\nexport interface IFormState {\n    /* The field values */\n    values: IValues;\n  \n    /* The field validation error messages */\n    errors: IErrors;\n\n    /* The response from the API call */\n    response: IResponse;\n  \n    /* Whether the form has been successfully submitted */\n    submitSuccess?: boolean;\n}\n\nexport interface IFormContext extends IFormState {\n  /* Function that allows values in the values state to be set */\n  setValues: (values: IValues) => void;\n\n  /* Function that validates a field */\n  validate: (fieldName: string) => void;\n}\n\n/*\n * The context which allows state and functions to be shared with Field.\n * Note that we need to pass createContext a default value which is why undefined is unioned in the type\n */\nexport const FormContext = React.createContext<IFormContext|undefined>(undefined);\n\n/**\n * Validates whether a field has a value\n * @param {IValues} values - All the field values in the form\n * @param {string} fieldName - The field to validate\n * @returns {string} - The error message\n */\nexport const required = (values: IValues, fieldName: string): string =>\n    values[fieldName] === undefined ||\n    values[fieldName] === null ||\n    values[fieldName] === \"\"\n        ? \"This must be populated\"\n        : \"\";\n\n/**\n* Validates whether a field is a valid email\n* @param {IValues} values - All the field values in the form\n* @param {string} fieldName - The field to validate\n* @returns {string} - The error message\n*/\nexport const isEmail = (values: IValues, fieldName: string): string =>\n    values[fieldName] &&\n    values[fieldName].search(\n        /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n    )\n        ? \"This must be in a valid email format\"\n        : \"\";    \n\n/**\n* Validates whether a field is a valid number\n* @param {IValues} values - All the field values in the form\n* @param {string} fieldName - The field to validate\n* @returns {string} - The error message\n*/\nexport const isNumber = (values: IValues, fieldName: string): string =>\n    values[fieldName] && \n    isNaN(values[fieldName])\n        ? \"This must be a number\"\n        : \"\";    \n\n/**\n* Validates whether a field is within a certain amount of characters\n* @param {IValues} values - All the field values in the form\n* @param {string} fieldName - The field to validate\n* @param {number} length - The maximum number of characters\n* @returns {string} - The error message\n*/\nexport const maxLength = (\n    values: IValues,\n    fieldName: string,\n    length: number\n): string =>\n    values[fieldName] && values[fieldName].length > length\n        ? `This can not exceed ${length} characters`\n        : \"\";\n\nexport class Form extends React.Component<IFormProps, IFormState> {\n    constructor(props: IFormProps){\n        super(props);\n\n        const errors: IErrors = {};\n        const values: IValues = {};\n        const response: IResponse = {};\n\n        this.state = {\n            errors,\n            values,\n            response,\n        };\n    }  \n\n    /**\n     * Stores new field values in state\n     * @param {IValues} values - The new field values\n     */\n    private setValues = (values: IValues) => {\n        this.setState({ values: { ...this.state.values, ...values } });\n    };\n\n    private setResponse = (response: IResponse) => {\n        this.setState({ response: response});\n        console.log(this.state.response);\n    }\n\n    /**\n     * Returns whether there are any errors in the errors object that is passed in\n     * @param {IErrors} errors - The field errors\n     */\n    private haveErrors(errors: IErrors) {\n        let haveError: boolean = false;\n        Object.keys(errors).map((key: string) => {\n            if (errors[key].length > 0) {\n                haveError = true;\n            }\n            return null;\n            });\n        return haveError;\n    }\n\n    /**\n     * Handles form submission\n     * @param {React.FormEvent<HTMLFormElement>} e - The form event\n     */\n    private handleSubmit = async (\n        e: React.FormEvent<HTMLFormElement>\n    ): Promise<void> => {\n        e.preventDefault();\n\n        console.log(this.state.values);\n    \n        if (this.validateForm()) {\n          const submitSuccess: boolean = await this.submitForm();\n          this.setState({ submitSuccess });\n        }\n    };\n\n    /**\n     * Executes the validation rules for all the fields on the form and sets the error state\n     * @returns {boolean} - Returns true if the form is valid\n     */\n    private validateForm(): boolean {\n        const errors: IErrors = {};\n        // eslint-disable-next-line array-callback-return\n        Object.keys(this.props.fields).map((fieldName: string) => {\n            errors[fieldName] = this.validate(fieldName);\n        });\n        this.setState({ errors });\n        return !this.haveErrors(errors);\n    }\n\n    /**\n     * Executes the validation rule for the field and updates the form errors\n     * @param {string} fieldName - The field to validate\n     * @returns {string} - The error message\n     */\n    private validate = (fieldName: string): string => {\n        let newError: string = \"\";\n    \n        if (\n            this.props.fields[fieldName] &&\n            this.props.fields[fieldName].validation\n        ) {\n            var errors: string[] = [];\n            this.props.fields[fieldName].validation!.rules.forEach(\n                (rule) => {\n                    const error = rule(\n                        this.state.values,\n                        fieldName,\n                        this.props.fields[fieldName].validation!.args\n                    );\n                    if (error !== \"\"){\n                        errors.push(error);\n                    }\n                }\n            );\n            if (errors.length > 0){\n                newError = errors[0];\n            }\n        }\n        console.log(newError);\n        // eslint-disable-next-line react/no-direct-mutation-state\n        this.state.errors[fieldName] = newError;\n        this.setState({\n        errors: { ...this.state.errors, [fieldName]: newError }\n        });\n        return newError;\n    };\n\n    /**\n     * Submits the form to the http api\n     * @returns {boolean} - Whether the form submission was successful or not\n     */\n    private async submitForm(): Promise<boolean> {\n        console.log(JSON.stringify(this.state.values))\n        try {\n            axios({\n                method: 'get',\n                url: `https://ln7kvmlhug.execute-api.us-east-1.amazonaws.com/prod/`,\n                params: {\n                    email: this.state.values.email,\n                    threshold: this.state.values.threshold\n                }\n            })\n            .then((response) => {\n                console.log(response);\n                this.setResponse({\"data\": response.data});\n            })\n            .catch((error) => {\n                console.log(error);\n            })\n            return true;\n        } catch (ex) {\n            return false;\n        }\n    }\n\n    public render() {\n        const {submitSuccess, errors, response } = this.state;\n        const context: IFormContext = {\n            ...this.state,\n            setValues: this.setValues,\n            validate: this.validate\n        };\n        return (\n            <FormContext.Provider value={context}>\n                <form onSubmit={this.handleSubmit} noValidate={true}>\n                    <div className=\"container\">\n                        {this.props.render()}\n                        <div className=\"form-group\">\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary\"\n                                disabled={this.haveErrors(errors)}\n                            >\n                                Submit\n                            </button>\n                        </div>\n                        {submitSuccess && (\n                            <> <div className=\"alert alert-info\" role=\"alert\">\n                                The form was successfully submitted!\n                            </div>\n                            <p>{response!.data}</p> </>\n                        )}\n                        {submitSuccess === false && !this.haveErrors(errors) && (\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                Sorry, an unexpected error has occurred\n                            </div>\n                        )}\n                        {submitSuccess === false && this.haveErrors(errors) && (\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                                Sorry, the form you submitted is invalid. Please try again.\n                            </div>\n                        )}\n                    </div>\n                </form>\n            </FormContext.Provider>\n        )\n    }\n}","import * as React from \"react\";\nimport {\n    IFormContext,\n    FormContext,\n    IValues,\n    IErrors\n  } from \"./Form\";\n\n/* The available editors for the field */\ntype Editor = \"textbox\" | \"multilinetextbox\" | \"dropdown\";\n\nexport interface IValidation {\n    rules: Array<(values: IValues, fieldName: string, args: any) => string>;\n    args?: any;\n}\n\nexport interface IFieldProps {\n  /* The unique field name */\n  id: string;\n\n  /* The label text for the field */\n  label?: string;\n\n  /* The editor for the field */\n  editor?: Editor;\n\n  /* The drop down items for the field */\n  options?: string[];\n\n  /* The field value */\n  value?: any;\n\n  /* The field validator function and argument */\n  validation?: IValidation;\n}\n\nexport const Field: React.FC<IFieldProps> = ({\n  id,\n  label,\n  editor,\n  options,\n  value\n}) => {\n    /**\n     * Gets the validation error for the field\n     * @param {IErrors} errors - All the errors from the form\n     * @returns {string[]} - The validation error\n     */\n    const getError = (errors: IErrors): string => (errors ? errors[id] : \"\");\n\n    /**\n     * Gets the inline styles for editor\n     * @param {IErrors} errors - All the errors from the form\n     * @returns {any} - The style object\n     */\n    const getEditorStyle = (errors: IErrors): any =>\n    getError(errors) ? { borderColor: \"red\" } : {};\n\n    return (\n        <FormContext.Consumer>\n            {(context: IFormContext | undefined) => (\n                <div className=\"form-group\">\n                {label && <label htmlFor={id}>{label}</label>}\n\n                {editor!.toLowerCase() === \"textbox\" && (\n                    <input\n                    id={id}\n                    type=\"text\"\n                    value={value}\n                    onChange={\n                        (e: React.FormEvent<HTMLInputElement>) =>\n                        context!.setValues({ [id]: e.currentTarget.value })\n                    }\n                    onBlur={() => context!.validate(id)}\n                    style={getEditorStyle(context!.errors)}\n                    className=\"form-control\"\n                    />\n                )}\n\n                {editor!.toLowerCase() === \"multilinetextbox\" && (\n                    <textarea\n                    id={id}\n                    value={value}\n                    onChange={\n                        (e: React.FormEvent<HTMLTextAreaElement>) =>\n                        context!.setValues({ [id]: e.currentTarget.value })\n                    }\n                    onBlur={() => context!.validate(id)}\n                    style={getEditorStyle(context!.errors)}\n                    className=\"form-control\"\n                    />\n                )}\n\n                {editor!.toLowerCase() === \"dropdown\" && (\n                    <select\n                    id={id}\n                    name={id}\n                    value={value}\n                    onChange={\n                        (e: React.FormEvent<HTMLSelectElement>) =>\n                        context!.setValues({ [id]: e.currentTarget.value })\n                    }\n                    onBlur={() => context!.validate(id)}\n                    style={getEditorStyle(context!.errors)}\n                    className=\"form-control\"\n                    >\n                    {options &&\n                        options.map(option => (\n                        <option key={option} value={option}>\n                            {option}\n                        </option>\n                        ))}\n                    </select>\n                )}\n\n                {getError(context!.errors) && (\n                    <div style={{ color: \"red\", fontSize: \"80%\" }}>\n                        <p>{getError(context!.errors)}</p>\n                    </div>\n                )}\n                </div>\n            )}\n        </FormContext.Consumer>\n    );\n};\n\nField.defaultProps = {\n  editor: \"textbox\"\n};","import * as React from \"react\";\nimport { Form, IFields, required, isEmail, isNumber } from \"./Form\";\nimport { Field } from \"./Field\";\n\nexport const ContactUsForm: React.FC = () => {\n    const fields: IFields = {\n        name: {\n          id: \"name\",\n          label: \"Name\",\n          validation: { rules: [required] }\n        },\n        email: {\n          id: \"email\",\n          label: \"Email\",\n          validation: { rules: [isEmail, required] }\n        },\n        threshold: {\n          id: \"threshold\",\n          label: \"Threshold\",\n          validation: { rules: [isNumber, required] }\n        }\n      };\n    return (\n        <Form\n        action=\"https://ln7kvmlhug.execute-api.us-east-1.amazonaws.com/prod/\"\n        fields={fields}\n        render={() => (\n            <React.Fragment>\n            <div className=\"alert alert-info\" role=\"alert\">\n                Enter the information below and we'll get back to you as soon as we\n                can.\n            </div>\n            <Field {...fields.name} />\n            <Field {...fields.email} />\n            <Field {...fields.threshold} />\n            </React.Fragment>\n        )}\n        />\n    );\n};","/**\n * Library for all icons used in library\n * Only icons explicitly imported will be used in application\n *\n * To import an entire library:\n * import brands from '@fortawesome/fontawesome-free-brands'\n * fontawesome.library.add(brands);\n *\n *\n */\n\nimport * as fontawesome from '@fortawesome/fontawesome-svg-core';\nimport * as faBitcoin from '@fortawesome/free-brands-svg-icons/faBitcoin';\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    init: () => fontawesome.library.add(\n        faBitcoin.definition,\n    )\n};","import * as React from \"react\";\nimport { Navbar, Nav } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IconDefinition, findIconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport fontAwesomeLib from './core/IconLibrary';\n\nfontAwesomeLib.init();\n\nconst bitcoinIconDefinition: IconDefinition = findIconDefinition({ prefix: 'fab', iconName: 'bitcoin' });\n\nexport interface INavProps { \n}\n\n// 'helloProps' describes the shape of props.\n// state is never set so we use the '{}' type.\nexport class BitcoinNavbar extends React.Component<INavProps, {}> {\n    render() {\n        return(\n        <div>\n            <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n                <Navbar.Brand href=\"#home\">\n                    <FontAwesomeIcon icon={bitcoinIconDefinition} size={\"2x\"} className=\"slow-spin\"/>\n                    {\" \"}Bitcoin Patrol\n                </Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                    <Nav.Link href=\"/\">Home</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        </div>   \n        )\n    }      \n}","import React from 'react';\nimport { Axios } from \"./Axios\";\nimport { ContactUsForm } from \"./ContactUs\";\nimport { BitcoinNavbar } from \"./Navbar\";\nimport './App.css';\n\nclass App extends React.Component {\n  public render() {\n    return (\n      <div className=\"mt-3\">\n        <BitcoinNavbar/>\n        <Axios/>\n        <ContactUsForm/> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}